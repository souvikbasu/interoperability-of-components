{"version":3,"sources":["serviceWorker.js","communicateWithHost.js","forms/SampleForm1.js","forms/SampleForm2.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","SampleForm1","state","variables","_this","props","outputVariables","completeForm","completeEventHandler","Object","objectSpread","changeInputVariables","event","setState","JSON","parse","target","value","changeOutputVariables","react_default","a","createElement","class","id","this","camundaApiUrl","taskId","processDefinitionId","onChange","stringify","onClick","Component","SampleForm2","App","componentName","TagName","components","formKey","formKeyParts","split","console","log","className","renderComponent","addEventListener","msgEvent","message","data","messageData","type","completeEventData","parent","postMessage","onload","communicateWithHost","ReactDOM","render","src_App","assign","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19f5a26d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default renderComponent => {\r\n  console.log(\"React Custom Form - 1 - listen to host messages\");\r\n  window.addEventListener(\"message\", receiveMessage, false);\r\n\r\n  window.onload = function() {\r\n    console.log(\r\n      \"React Custom Form - 2 - tell host we are ready now to listen to host messages\"\r\n    );\r\n    window.parent.postMessage({ type: \"formLoaded\" });\r\n  };\r\n\r\n  function receiveMessage(msgEvent) {\r\n    const message = msgEvent.data;\r\n    const messageData = message.data;\r\n\r\n    if (message.type === \"loadFormRequest\") {\r\n      console.log(\r\n        \"React Custom Form - 3 - received event from host\",\r\n        messageData\r\n      );\r\n\r\n      console.log(\r\n        \"React Custom Form - 4,5,6,7 - render component and send variables as props, send handler for complete event\"\r\n      );\r\n\r\n      console.log(\"React Custom Form - 7 - listen to React component events\");\r\n\r\n      renderComponent(messageData, completeEventData => {\r\n        console.log(\r\n          `React Custom Form - 8 - React component raised event to complete the task. Send message to host to complete the task`\r\n        );\r\n        window.parent.postMessage({\r\n          type: \"formCompleteRequest\",\r\n          data: completeEventData\r\n        });\r\n      });\r\n    }\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nclass SampleForm1 extends Component {\r\n  state = { variables: this.props.variables, outputVariables: {} };\r\n\r\n  completeForm = () => {\r\n    this.props.completeEventHandler({\r\n      ...this.state.variables,\r\n      ...this.state.outputVariables\r\n    });\r\n  };\r\n\r\n  changeInputVariables = event => {\r\n    this.setState({ variables: JSON.parse(event.target.value) });\r\n  };\r\n\r\n  changeOutputVariables = event => {\r\n    this.setState({ outputVariables: JSON.parse(event.target.value) });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"p-2\">\r\n        <div>This is React Component</div>\r\n        <div class=\"mb-4\">\r\n          <div>\r\n            Camunda API URL:{\" \"}\r\n            <span id=\"camunda_api_url\">{this.props.camundaApiUrl}</span>\r\n          </div>\r\n          <div>\r\n            Task ID: <span id=\"task_id\">{this.props.taskId}</span>\r\n          </div>\r\n          <div>\r\n            Process Definition ID:{\" \"}\r\n            <span id=\"process_definition_id\">\r\n              {this.props.processDefinitionId}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div>Input Variables:</div>\r\n          <textarea\r\n            id=\"input_variables\"\r\n            class=\"w-full h-64 border mb-4\"\r\n            onChange={this.changeInputVariables}\r\n          >\r\n            {JSON.stringify(this.state.variables, null, 4)}\r\n          </textarea>\r\n        </div>\r\n        <div>\r\n          <div>Output Variables:</div>\r\n          <textarea\r\n            id=\"output_variables\"\r\n            class=\"w-full h-64 border\"\r\n            onChange={this.changeOutputVariables}\r\n          />\r\n        </div>\r\n        <button id=\"complete\" class=\"btn-primary\" onClick={this.completeForm}>\r\n          Complete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SampleForm1;\r\n","import React, { Component } from \"react\";\r\n\r\nclass SampleForm2 extends Component {\r\n  render() {\r\n    return <div>Sample Form 2</div>;\r\n  }\r\n}\r\n\r\nexport default SampleForm2;\r\n","import React from \"react\";\r\nimport SampleForm1 from \"./forms/SampleForm1\";\r\nimport SampleForm2 from \"./forms/SampleForm2\";\r\n\r\nfunction App(props) {\r\n  const components = {\r\n    SampleForm1: SampleForm1,\r\n    SampleForm2: SampleForm2\r\n  };\r\n\r\n  let componentName;\r\n  let TagName = null;\r\n  if (props.formKey) {\r\n    const formKeyParts = props.formKey.split(\":\");\r\n\r\n    if (formKeyParts[0] === \"react\") {\r\n      console.log(\"React component to be rendered: \", formKeyParts[1]);\r\n      componentName = formKeyParts[1];\r\n    }\r\n  } else if (props.componentName) {\r\n    componentName = props.componentName;\r\n  }\r\n\r\n  TagName = components[componentName];\r\n\r\n  return TagName ? (\r\n    <div className=\"App\">\r\n      <TagName {...props} />\r\n    </div>\r\n  ) : null;\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport communicateWithHost from \"./communicateWithHost\";\r\nimport App from \"./App\";\r\n\r\ncommunicateWithHost((variables, completeEventHandler) => {\r\n  ReactDOM.render(\r\n    <App {...variables} completeEventHandler={completeEventHandler} />,\r\n    document.getElementById(\"root\")\r\n  );\r\n});\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}