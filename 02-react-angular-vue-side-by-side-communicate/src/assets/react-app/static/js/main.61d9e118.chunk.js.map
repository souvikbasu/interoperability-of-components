{"version":3,"sources":["components/ReactComponent/ReactComponent.js","App.js","serviceWorker.js","index.js"],"names":["ReactComponent","_ref","msg","domRef","React","createRef","react_default","a","createElement","ref","className","onClick","event","CustomEvent","detail","bubbles","current","dispatchEvent","window","postMessage","App","state","_this2","this","addEventListener","postMsg","console","log","data","setState","components_ReactComponent_ReactComponent","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAiCeA,MA9Bf,SAAAC,GAAiC,IAAPC,EAAOD,EAAPC,IACpBC,EAASC,IAAMC,YAmBnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKN,EAAQO,UAAU,kBAC1BJ,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,UAAQG,QApBM,WAChB,IAAIC,EAAQ,IAAIC,YAAY,cAAe,CACzCC,OAAQ,CAAEZ,IAAK,wCACfa,SAAS,IAEXZ,EAAOa,QAAQC,cAAcL,KAe3B,cACAN,EAAAC,EAAAC,cAAA,UAAQG,QAbQ,WAClBO,OAAOC,YACL,CACEjB,IAAK,oDAEP,OAQA,gBACAI,EAAAC,EAAAC,cAAA,gCAAwBN,KCFfkB,6MArBbC,MAAQ,CACNnB,IAAK,uFAGa,IAAAoB,EAAAC,KAClBL,OAAOM,iBAAiB,UAAW,SAAAC,GACjCC,QAAQC,IAAIF,EAAQG,KAAK1B,KACzBoB,EAAKO,SAAS,CAAE3B,IAAKuB,EAAQG,KAAK1B,yCAKpC,OACEI,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAACsB,EAAD,CAAgB5B,IAAKqB,KAAKF,MAAMnB,cAhBtBE,IAAM2B,WCQJC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.61d9e118.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ReactComponent.css\";\r\n\r\nfunction ReactComponent({ msg }) {\r\n  let domRef = React.createRef();\r\n\r\n  const emitEvent = () => {\r\n    var event = new CustomEvent(\"sendMessage\", {\r\n      detail: { msg: \"Hi from React!! This is custom event\" },\r\n      bubbles: true\r\n    });\r\n    domRef.current.dispatchEvent(event);\r\n  };\r\n\r\n  const postMessage = () => {\r\n    window.postMessage(\r\n      {\r\n        msg: \"Hi again from React!! This is window.postMessage\"\r\n      },\r\n      \"*\"\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div ref={domRef} className=\"ReactComponent\">\r\n      <div>React Component</div>\r\n      <button onClick={emitEvent}>Emit Event</button>\r\n      <button onClick={postMessage}>Post Message</button>\r\n      <div>Message received: {msg}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReactComponent;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport ReactComponent from \"./components/ReactComponent/ReactComponent\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    msg: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"message\", postMsg => {\r\n      console.log(postMsg.data.msg);\r\n      this.setState({ msg: postMsg.data.msg });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div>React App</div>\r\n        <ReactComponent msg={this.state.msg} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}